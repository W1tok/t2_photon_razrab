import tkinter as tk
import random

class Bird:
    def __init__(self, canvas, x, y):
        self.canvas = canvas
        self.x = x
        self.y = y
        self.gravity = 0.04
        self.lift = -1
        self.velocity = 0
        self.size = 20
        self.bird_id = self.canvas.create_oval(self.x, self.y, self.x + self.size, self.y + self.size, fill='yellow')

    def jump(self, event):
        self.velocity = self.lift

    def draw(self):
        self.velocity += self.gravity
        self.y += self.velocity
        self.canvas.coords(self.bird_id, self.x, self.y, self.x + self.size, self.y + self.size)

class Pillar:
    def __init__(self, canvas, x, height):
        self.canvas = canvas
        self.x = x
        self.height = height
        self.width = 30
        self.pillar_id = self.canvas.create_rectangle(self.x, 0, self.x + self.width, self.height, fill='green')
        self.bottom_pillar_id = self.canvas.create_rectangle(self.x, height + 100, self.x + self.width, 400, fill='green')
        self.passed = False

    def draw(self):
        self.x -= 2  # Move the pillar to the left
        self.canvas.move(self.pillar_id, -2, 0)
        self.canvas.move(self.bottom_pillar_id, -2, 0)

    def is_passed(self, bird):
        return self.x < bird.x and not self.passed

    def is_hit(self, bird):
        return (bird.x + bird.size > self.x and bird.x < self.x + self.width and 
                (bird.y < self.height or bird.y + bird.size > self.height + 100))

class Game:
    def __init__(self, root):
        self.root = root
        self.canvas = tk.Canvas(root, width=600, height=400)
        self.canvas.pack()
        self.bird = Bird(self.canvas, 50, self.canvas.winfo_height() // 2)
        self.pillars = []
        self.pillar_interval = 300  # Interval between pillars
        self.next_pillar_x = self.canvas.winfo_width()
        self.score = 0
        self.score_text = self.canvas.create_text(40, 10, text="Score: 0", font=("Arial", 16))
        self.game_over_text = None
        self.create_pillar()  # Start with the first pillar
        self.root.bind("<KeyPress>", self.bird.jump)
        self.update()

    def create_pillar(self):
        height = random.randint(50, 200)
        self.pillars.append(Pillar(self.canvas, self.next_pillar_x, height))
        self.next_pillar_x += self.pillar_interval

    def update_score(self):
        self.canvas.itemconfig(self.score_text, text=f"Score: {self.score}")

    def show_game_over(self):
        if self.game_over_text is None:
            self.game_over_text = self.canvas.create_text(300, 200,
                                                          text="Game Over!", font=("Arial", 24), fill="red")
            self.canvas.create_text(300, 230,
                                     text=f"Your score: {self.score}", font=("Arial", 16), fill="black")

    def update(self):
        self.bird.draw()
        for pillar in self.pillars:
            pillar.draw()
            if pillar.is_passed(self.bird):
                self.score += 1
                self.update_score()
                pillar.passed = True

            if pillar.is_hit(self.bird):
                self.show_game_over()
                return

        # Spawn new pillar if needed
        if len(self.pillars) < 3 or self.pillars[-1].x  > self.canvas.winfo_width() - self.pillar_interval:
            self.create_pillar()

        # Check if bird is out of bounds
        if self.bird.y < 0 or self.bird.y > 400:
            self.show_game_over()
            return

        self.root.after(10, self.update)

class Menu:
    def __init__(self, root):
        self.root = root
        self.frame = tk.Frame(root)
        self.frame.pack()

        self.label = tk.Label(self.frame, text="Welcome to the Flappy Bird Game!", font=("Arial", 24))
        self.label.pack(pady=20)

        self.play_button = tk.Button(self.frame, text="Play", command=self.start_game)
        self.play_button.pack(pady=10)

        self.shop_button = tk.Button(self.frame, text="Shop", command=self.show_shop)
        self.shop_button.pack(pady=10)

        self.leaderboard_button = tk.Button(self.frame, text="Leaderboard", command=self.show_leaderboard)
        self.leaderboard_button.pack(pady=10)

    def start_game(self):
        self.frame.pack_forget()  
        Game(self.root)  

    def show_shop(self):
        print("Shop is not implemented yet.")

    def show_leaderboard(self):
        print("Leaderboard is not implemented yet.")

if __name__ == "__main__":
    root = tk.Tk()
    root.title("Flappy Bird Game")
    Menu(root)  
    root.mainloop()



if __name__ == "__main__":
    game = Game()
    game.root.mainloop()
